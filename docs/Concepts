
# Difference between Recursion and Backtracking:
	* In recursion, the function calls itself until it reaches a base case. 
	* In backtracking, we use recursion to explore all the possibilities until we get the best result for the problem.
	
# Difference between Shallow copy and Deep Copy
	* Shallow Copy stores the copy of the original object and points the references to the objects. 
	* Deep copy stores the copy of the original object and recursively copies the objects as well

# Java Serialization and deserialization
	-- Serialization is a mechanism of converting the state of an object into a byte stream.
	-- Deserialization is the reverse process where the byte stream is used to recreate the actual Java object in memory.

	+ implement the java.io.Serializable interface.
		The ObjectOutputStream class contains **writeObject()** method for serializing an Object.
		The ObjectInputStream class contains ** readObject()** method for deserializing an object.
		
# Characteristics of Bipartite Graph:
	* A graph is Bipartite if and only if it does not contain an odd cycle.
	* A graph is Bipartite if and only if it is 2-colorable.
	* A graph is Bipartite if and only if it's spectrum is symmetric.

# Backtracking vs DFS
	In Backtracking, we need to restore previous state of visited node, by making visited=false, after exploring current path.
	In DFS the state of the node remains same after a path is explored so that it will not be explored again.
	DFS is quicker than a generic backtracking algorithm.
	DFS handles an explicit tree, while backtracking handles an implicit tree
	
	DFS is a special type of backtracking algorithmic design paradigm where the process of backtracking takes place in the leaf nodes.
	In case of backtracking,the algorithm also rejects the useless branch of the state-space tree.
	This is why DFS maintains the entire tree structure while Backtracking maintains the pruned tree.

